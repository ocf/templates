<!doctype html>
<html>
    <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
        <title>OCF Email Templates</title>
        <style>
            #variables > div {
                margin-bottom: 10px;
            }

            input.error {
                background-color: #f66;
                border-color: #a94442;
            }

            .copied {
                color:#888;
            }

            .fresh {
                color:#000;
            }

            .notready {
                color:#000;
            }
        </style>
    </head>
    <body>

        <div class="container" style="margin-top: 20px;">
            <div class="row">
                <div class="col-md-3">
                    <div class="well">
                        <ul id="nav" class="nav nav-stacked nav-pills"></ul>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="well">
                        <noscript><p>You'd feel better if you enabled JavaScript.</p></noscript>

                        <h2 style="margin-top: 0;" id="title"></h2>
                        <div id="variables"></div>
                        <textarea id="text" class="form-control" style="height: 400px;"></textarea>
                        <button style="margin-top: 20px;" id="button" class="fresh" onclick="copyText()">Copy Text</button>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
        <script>
            (function() {
                var oldPage,
                    text = '',
                    values = {};

                var preventSelection = function(e) {
                    e.preventDefault();
                };

                function updateText() {
                    const textField = document.getElementById("text");

                    // By default, assume the variables are filled and
                    // text selection of the template is allowed
                    textField.removeEventListener("mousedown", preventSelection);
                    textField.readonly = false;

                    var content = text,
                        vars = _.map(_.uniq(content.match(/{.+?}/g)), function(str) {
                            return str.substring(1, str.length - 1);
                        });

                    if (!document.getElementById('variables').children.length) {
                        _.each(vars, function(v) {
                            const formGroupDiv = document.createElement('div');
                            formGroupDiv.classList.add('form-group');

                            const label = document.createElement('label');
                            label.textContent = v;

                            const input = document.createElement('input');
                            input.type = 'text';
                            input.classList.add('form-control', 'error');
                            input.value = values[v] || '';

                            input.addEventListener('keyup', function () {
                                values[v] = this.value;
                                // Toggle the 'error' class based on the value
                                this.classList.toggle('error', values[v] === '');
                                refreshButton();
                                updateText();
                            });

                            formGroupDiv.appendChild(label);
                            formGroupDiv.appendChild(input);

                            document.getElementById('variables').appendChild(formGroupDiv);
                        });
                    }

                    _.each(vars, function(v) {
                        var search = '{' + v + '}',
                            replace = values[v] || search;

                        // Set the template text as not selectable and grey it
                        // out to make it clear that not all the variables have
                        // been filled
                        if (!(v in values) || values[v] === "") {
                            textField.addEventListener("mousedown", preventSelection);
                            textField.readonly = true;
                            buttonNotReady();
                        }

                        // fuck JavaScript
                        content = content.split(search).join(replace);
                    });

                    textField.textContent = content;
                }

                function updatePage() {
                    var page = (window.location.hash || '#').substring(1);

                    if (oldPage === page) {
                        return;
                    }

                    const navItems = document.querySelectorAll('#nav > li');
                    navItems.forEach(item => item.classList.remove('active'));
                    navItems.forEach(item => {
                        if (item.dataset.template === page) {
                            document.getElementById('variables').innerHTML = '';
                            item.classList.add('active');

                            fetch('/templates/' + encodeURIComponent(page))
                                .then(response => response.text())
                                .then(newText => {
                                    text = newText;
                                    refreshButton();
                                    updateText();
                                });
                        }
                    });
                }

                document.addEventListener('DOMContentLoaded', () => {
                    const templates = {templates};

                    templates.forEach(template => {
                        const li = document.createElement('li');
                        li.setAttribute('role', 'presentation');
                        li.dataset.template = template;

                        const a = document.createElement('a');
                        a.textContent = template;
                        a.href = '#' + encodeURIComponent(template);

                        li.appendChild(a);
                        document.getElementById('nav').appendChild(li);
                    });
                    window.addEventListener('hashchange', updatePage);
                    refreshButton();
                    updateText();
                    updatePage();
                });

                const copy_button = document.getElementById("button");

                window.copyText = () => {
                    const copy_button = document.getElementById("button");
                    // Copy text to clipboard onclick.
                    if (copy_button.className == 'notready') {
                        buttonNotReady();
                    }
                    else {
                        const copyText = document.getElementById("text");
                        const title = document.getElementById("title");
                        navigator.clipboard.writeText(copyText.value);

                        // Button text change from "Copy Text" to "Copied", and text turns grey.
                        copy_button.innerHTML = 'Copied';
                        copy_button.className = 'copied';
                    }
                }

                window.refreshButton = () => {
                    copy_button.innerHTML = 'Copy Text';
                    copy_button.className = 'fresh';
                }

                window.buttonNotReady = () => {
                    copy_button.innerHTML = 'Not all fields are filled';
                    copy_button.className = 'notready';
                }
            })();


        </script>
    </body>
</html>
