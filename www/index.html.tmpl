<!doctype html>
<html>
    <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
        <title>OCF Email Templates</title>
        <style>
            #variables > div {
                margin-bottom: 10px;
            }

            input.error {
                background-color: #f66;
                border-color: #a94442;
            }
        </style>
    </head>
    <body>

        <div class="container" style="margin-top: 20px;">
            <div class="row">
                <div class="col-md-3">
                    <div class="well">
                        <ul id="nav" class="nav nav-stacked nav-pills"></ul>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="well">
                        <noscript><p>You'd feel better if you enabled JavaScript.</p></noscript>

                        <h2 style="margin-top: 0;" id="title"></h2>
                        <div id="variables"></div>
                        <textarea id="text" class="form-control" style="height: 400px;"></textarea>
                        <button style="margin-top: 20px;" id="button" class="fresh" onclick="copyText()">Copy Text</button>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
        <script>
            (function() {
                var oldPage,
                    text = '',
                    values = {};

                var preventSelection = function(e) {
                    e.preventDefault();
                };

                function updateText() {
                    // By default, assume the variables are filled and
                    // text selection of the template is allowed
                    $('#text').unbind('mousedown', preventSelection);
                    $('#text').prop('readonly', false);

                    var content = text,
                        vars = _.map(_.uniq(content.match(/{.+?}/g)), function(str) {
                            return str.substring(1, str.length - 1);
                        });

                    if (!$('#variables').children().length) {
                        _.each(vars, function(v) {
                            $('<div>')
                                .addClass('form-group')
                                .append(
                                    $('<label>')
                                        .text(v)
                                )
                                .append(
                                    $('<input type="text">')
                                        .addClass('form-control error')
                                        .val(values[v] || '')
                                        .keyup(function() {
                                            values[v] = $(this).val();
                                            // If the field is empty, show it as errored
                                            $(this).toggleClass('error', values[v] === "");
                                            updateText();
                                        })
                                )
                                .appendTo('#variables');
                        });
                    }

                    _.each(vars, function(v) {
                        var search = '{' + v + '}',
                            replace = values[v] || search;

                        // Set the template text as not selectable and grey it
                        // out to make it clear that not all the variables have
                        // been filled
                        if (!(v in values) || values[v] === "") {
                            $('#text').bind('mousedown', preventSelection);
                            $('#text').prop('readonly', true);
                        }

                        // fuck JavaScript
                        content = content.split(search).join(replace);
                    });

                    $('#text').text(content);
                }

                function updatePage() {
                    var page = (window.location.hash || '#').substring(1);

                    if (oldPage === page) {
                        return;
                    }

                    $('#title').text(page);
                    $('#nav > li')
                        .removeClass('active')
                        .each(function() {
                            el = $(this);
                            if (el.data('template') === page) {
                                $('#variables').empty();
                                el.addClass('active');

                                $.get('/templates/' + encodeURI(page), function(newText) {
                                    text = newText;
                                    updateText();
                                });
                            }
                        });

                }

                $(document).ready(function() {
                    var templates = {templates};

                    _.each(templates, function(template) {
                        $('<li>')
                            .attr('role', 'presentation')
                            .data('template', template)
                            .append(
                                $('<a>')
                                    .text(template)
                                    .attr('href', '#' + encodeURI(template))
                            )
                            .appendTo('#nav');
                    });

                    $(window).on('hashchange', updatePage);
                    updateText();
                    updatePage();
                });
            })();
        </script>
    </body>
</html>
